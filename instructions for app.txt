I have used AI to write me code for a web app. I would like to add a feature to it such that the user takes/uploads a picture of their medical bill, and the app automatically detects which cpt codes were used in the bill and what was their associated "allowed amount" cost, and what healthcare institution is the bill from. once it figures out which cpt codes were billed, it would use them to conduct the api search where it would retrieve the rates associated for that cpt code for that hospital from the supabase database, and compare it to the price that was on the bill. if there was a discrepancy, it would highlight that in the results page. All of this feature should be separate and in addition to the existing app. basically, on the home page of the app, the user can either go with the existing functionalities or click a separate button below to proceed with this new route of scanning and analysing their medical bill. you must provide the complete and correct code for achieving this and provide step by step instructions for implementing the code. the code should not be some hypothetical or example code, but instead it should be directly made for my specific app, such that all I have to do is copy paste it into something like vs code and run it. also remember that I have no programming experience, so the step by step instructions should be understandable for me. now, here's the most important part: if you need any additional information and/or have any questions for me to make this work, you should ask me them before hand instead of not asking and generating some wrong code. I will now provide the existing code for the react application. note that it is in multiple files that I have copy pasted as one. It is as follows


import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Fuse from 'fuse.js';

const medicalProcedures = [
  { name: "Basic metabolic panel", cptCode: "80048" },
  { name: "Blood test, comprehensive group of blood chemicals", cptCode: "80053" },
  { name: "Obstetric blood test panel", cptCode: "80055" },
  { name: "Blood test, lipids (cholesterol and triglycerides)", cptCode: "80061" },
  { name: "Kidney function panel test", cptCode: "80069" },
  { name: "Liver function blood test panel", cptCode: "80076" },
  { name: "Manual urinalysis test with examination using microscope", cptCode: "81000" },
  { name: "Automated urinalysis test", cptCode: "81002 or 81003" },
  { name: "PSA (prostate specific antigen)", cptCode: "84153-84154" },
  { name: "Blood test, thyroid stimulating hormone (TSH)", cptCode: "84443" },
  { name: "Complete blood cell count, with differential white blood cells, automated", cptCode: "85025" },
  { name: "Complete blood count, automated", cptCode: "85027" },
  { name: "Blood test, clotting time", cptCode: "85610" },
  { name: "Coagulation assessment blood test", cptCode: "85730" },
  { name: "CT scan, head or brain, without contrast", cptCode: "70450" },
  { name: "MRI scan of brain before and after contrast", cptCode: "70553" },
  { name: "X-Ray, lower back, minimum four views", cptCode: "72110" },
  { name: "MRI scan of lower spinal canal", cptCode: "72148" },
  { name: "CT scan, pelvis, with contrast", cptCode: "72193" },
  { name: "MRI scan of leg joint", cptCode: "73721" },
  { name: "CT scan of abdomen and pelvis with contrast", cptCode: "74177" },
  { name: "Ultrasound of abdomen", cptCode: "76700" },
  { name: "Abdominal ultrasound of pregnant uterus (greater or equal to 14 weeks 0 days) single or first fetus", cptCode: "76805" },
  { name: "Ultrasound pelvis through vagina", cptCode: "76830" },
  { name: "Mammography of one breast", cptCode: "77065" },
  { name: "Mammography of both breasts", cptCode: "77066" },
  { name: "Mammography, screening, bilateral", cptCode: "77067" },
  { name: "Cardiac valve and other major cardiothoracic procedures with cardiac catheterization with major complications or comorbidities", cptCode: "216" },
  { name: "Spinal fusion except cervical without major comorbid conditions or complications (MCC)", cptCode: "460" },
  { name: "Major joint replacement or reattachment of lower extremity without major comorbid conditions or complications (MCC)", cptCode: "470" },
  { name: "Cervical spinal fusion without comorbid conditions (CC) or major comorbid conditions or complications (MCC)", cptCode: "473" },
  { name: "Uterine and adnexa procedures for non-malignancy without comorbid conditions (CC) or major comorbid conditions or complications (MCC)", cptCode: "743" },
  { name: "Removal of 1 or more breast growth, open procedure", cptCode: "19120" },
  { name: "Shaving of shoulder bone using an endoscope", cptCode: "29826" },
  { name: "Removal of one knee cartilage using an endoscope", cptCode: "29881" },
  { name: "Removal of tonsils and adenoid glands patient younger than age 12", cptCode: "42820" },
  { name: "Diagnostic examination of esophagus, stomach, and/or upper small bowel using an endoscope", cptCode: "43235" },
  { name: "Biopsy of the esophagus, stomach, and/or upper small bowel using an endoscope", cptCode: "43239" },
  { name: "Diagnostic examination of large bowel using an endoscope", cptCode: "45378" },
  { name: "Biopsy of large bowel using an endoscope", cptCode: "45380" },
  { name: "Removal of polyps or growths of large bowel using an endoscope", cptCode: "45385" },
  { name: "Ultrasound examination of lower large bowel using an endoscope", cptCode: "45391" },
  { name: "Removal of gallbladder using an endoscope", cptCode: "47562" },
  { name: "Repair of groin hernia patient age 5 years or older", cptCode: "49505" },
  { name: "Biopsy of prostate gland", cptCode: "55700" },
  { name: "Surgical removal of prostate and surrounding lymph nodes using an endoscope", cptCode: "55866" },
  { name: "Routine obstetric care for vaginal delivery, including pre-and post-delivery care", cptCode: "59400" },
  { name: "Routine obstetric care for cesarean delivery, including pre-and post-delivery care", cptCode: "59510" },
  { name: "Routine obstetric care for vaginal delivery after prior cesarean delivery including pre-and post-delivery care", cptCode: "59610" },
  { name: "Injection of substance into spinal canal of lower back or sacrum using imaging guidance", cptCode: "62322" },
  { name: "Injections of anesthetic and/or steroid drug into lower or sacral spine nerve root using imaging guidance", cptCode: "64483" },
  { name: "Removal of recurring cataract in lens capsule using laser", cptCode: "66821" },
  { name: "Removal of cataract with insertion of lens", cptCode: "66984" },
  { name: "Electrocardiogram, routine, with interpretation and report", cptCode: "93000" },
  { name: "Insertion of catheter into left heart for diagnosis", cptCode: "93452" },
  { name: "Sleep study", cptCode: "95810" },
  { name: "Physical therapy, therapeutic exercise", cptCode: "97110" }
];

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedProcedure, setSelectedProcedure] = useState(null);
  const [zipCode, setZipCode] = useState('');
  const [hospitals, setHospitals] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showDropdown, setShowDropdown] = useState(false);

  const fuse = new Fuse(medicalProcedures, {
    keys: ['name', 'cptCode'],
    threshold: 0.3,
  });

  const handleSearch = async (e) => {
    e.preventDefault();
    if (!selectedProcedure) {
      setError('Please select a medical procedure');
      return;
    }
    setLoading(true);
    setError('');
    setHospitals([]);
    
    try {
      const response = await axios.post(
        'https://kcklbzeaocexdwhcsiat.supabase.co/rest/v1/rpc/get_cigna_hospitals',
        {
          billing_code: selectedProcedure.cptCode,
          zip_code: zipCode,
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtja2xiemVhb2NleGR3aGNzaWF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTk3NzI3MTksImV4cCI6MjAzNTM0ODcxOX0.T7ooLFl6wuHF9FYlaVInWk4_ctvgpjjy7Q2trqiSkOM',
            'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtja2xiemVhb2NleGR3aGNzaWF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTk3NzI3MTksImV4cCI6MjAzNTM0ODcxOX0.T7ooLFl6wuHF9FYlaVInWk4_ctvgpjjy7Q2trqiSkOM',
          },
        }
      );
      setHospitals(response.data);
    } catch (err) {
      setError('An error occurred while fetching data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleProcedureSelect = (procedure) => {
    setSelectedProcedure(procedure);
    setSearchTerm(`${procedure.name} (${procedure.cptCode})`);
    setShowDropdown(false);
  };

  const filteredProcedures = searchTerm 
    ? fuse.search(searchTerm).map(result => result.item)
    : medicalProcedures;

  return (
    <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
      <div className="relative py-3 sm:max-w-xl sm:mx-auto">
        <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
          <h1 className="text-2xl font-semibold mb-5">Cigna Price Transparency App</h1>
          <form onSubmit={handleSearch} className="mb-5">
            <div className="mb-4 relative">
              <label htmlFor="procedureSearch" className="block text-gray-700 text-sm font-bold mb-2">
                Medical Procedure or CPT Code
              </label>
              <input
                type="text"
                id="procedureSearch"
                value={searchTerm}
                onChange={(e) => {
                  setSearchTerm(e.target.value);
                  setShowDropdown(true);
                  setSelectedProcedure(null);
                }}
                onFocus={() => setShowDropdown(true)}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Search by procedure name or CPT code"
                required
              />
              {showDropdown && (
                <ul className="absolute z-10 w-full bg-white border border-gray-300 mt-1 max-h-60 overflow-auto">
                  {filteredProcedures.map((procedure, index) => (
                    <li
                      key={index}
                      onClick={() => handleProcedureSelect(procedure)}
                      className="cursor-pointer hover:bg-gray-100 p-2"
                    >
                      {procedure.name} ({procedure.cptCode})
                    </li>
                  ))}
                </ul>
              )}
            </div>
            <div className="mb-4">
              <label htmlFor="zipCode" className="block text-gray-700 text-sm font-bold mb-2">
                Zip Code
              </label>
              <input
                type="text"
                id="zipCode"
                value={zipCode}
                onChange={(e) => setZipCode(e.target.value)}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                required
              />
            </div>
            <button
              type="submit"
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              disabled={loading}
            >
              {loading ? 'Searching...' : 'Search'}
            </button>
          </form>
          {error && <p className="text-red-500 mb-5">{error}</p>}
          {hospitals.length > 0 && (
            <div>
              <h2 className="text-xl font-semibold mb-3">Results</h2>
              <ul className="space-y-4">
                {hospitals.map((hospital, index) => (
                  <li key={index} className="border-b pb-4">
                    <p className="font-semibold">{hospital.organization_name}</p>
                    <p>{hospital.address_line_1}</p>
                    <p>{hospital.city}, {hospital.state}</p>
                    <p className="text-green-600 font-semibold">${parseFloat(hospital.negotiated_rate).toFixed(2)}</p>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;



index.css
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';




index.js
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);



postcss.config.js
module.exports = {
    plugins: [
      require('tailwindcss'),
      require('autoprefixer'),
    ],
  }


tailwind.config.js
module.exports = {
    purge: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],
    darkMode: false,
    theme: {
      extend: {},
    },
    variants: {
      extend: {},
    },
    plugins: [],
  }


package.json
{
    "name": "price-transparency-app",
    "version": "1.0.0",
    "private": true,
    "dependencies": {
        "autoprefixer": "^10.4.0",
        "axios": "^1.7.2",
        "fuse.js": "^6.6.2",
        "postcss": "^8.3.11",
        "react": "^17.0.2",
        "react-dom": "^17.0.2",
        "react-scripts": "^5.0.1",
        "tailwindcss": "^2.2.19"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    }
}


Now I shall give you the responses to a few questions and answers. read them very carefully. 

1. You mentioned that the user will upload a picture of their medical bill. How do you plan to handle the image upload? Will you use a library like React Dropzone or a simple file input?
I dont know. remember i have no programming experience, so you are in charge of figuring out the best solution, and it should work, and it should be completly free to implement. Have it such that the user ca upload multiple files if need be, and they can be in multiple formats such as pdf, jpeg, png, heif etc...

2. You mentioned that the app will automatically detect the CPT codes and allowed amounts from the uploaded image. This will require Optical Character Recognition (OCR) technology. Are you planning to use a library like Tesseract.js or a cloud-based API like Google Cloud Vision API?
Again, i dont know since i have no programming experience. but remember, it needs to be free, but also very accurate. also remember that sometimes the cpt codes might be called something else like "drg code" or "hcpcs" or "billing code" but they all essentially mean the same thing. 

3. You mentioned that the app will retrieve the rates associated with the CPT codes from a Supabase database. Can you provide more information about the database schema and how the rates are stored?

Sure here is some information about the databse schema:
Name	Format	Type	Description
billing_code	
text
string	
negotiated_rate	
text
string	
billing_code_modifier	
text
string	
billing_class	
text
string	
npi	
text
string	
tin_value	
text
string	
organization_name	
text
string	
city	
text
string	
state	
text
string	
zip_code	
text
string	
address_line_1	
text
string	
website	
text
string	



4. You mentioned that the app will compare the rates retrieved from the database with the prices on the bill and highlight any discrepancies. How do you want to display the discrepancies? Should it be a simple text output or a more visual representation?
It should be a more user friendly and visually appealing output. like maybe show the correct ones highlighted in green, while the incrorrect ones highlighted in red and showing the ideal rates besides it, and then at the botton show a grand total of how much you could have saved had the rates been correct. 

5. Are there any specific security or authentication requirements for the app, such as user authentication or encryption?

I dont know, but what I do know is that if there is any sort of personally identifyig information such as name, phone numbers, or some member id or something, then redact it, but if there is a claim id, then dont redadt it. 



How do you want to handle cases where the OCR engine is unable to extract text from the uploaded image?
In that case, say to the user that it was unable to accurately extract the information from the bill, and instead provide the user with the option to manually input the billing codes and prices on the bill. In fact, I just remembered something very important. In some cases, the bill might not have a billing code column at all. instead it will have the name of the medical procedure, and it will be your job to decide which billing code this corresponds to. remember that in the app.jsx code, i had created a dataframe that matched the name of the procedure to the billing code. but it is likely that the name of the procedure on the bill will not match the names of the procedures in the dataframe that was in my code. so in such cases use the best logic to match it to the procedure that makes most sense, and if youre unsure, ask the reader if this is correct and show them the rest of the options from the dataframe that might make sense instead. 

How do you want to handle cases where the CPT codes are not found in the Supabase database?
in such insteances, ignore those cpt codes, and only focus your analysis on the ones that were found in the supabase. in such instances, you can also indicate this in the results by making those codes in grey color and writing that these could not be compared to the available data. 


Do you want to add any additional features, such as the ability to save the results or print them out?

yes please. have the option to both save and print the results. and the user should be able to go back to the home page and this information not be deleted. it will only be deleted if they close the application. and in that case, it will prompt them that their results have not been saved. 


How do you want to handle cases where the user manually inputs the billing codes and prices, but the codes are not found in the Supabase database?
then tell that to the user, and proceed with the ones that did match to the codes in supabase.

Do you want to add any additional features, such as the ability to edit the results or add notes to the results?
sure, yes to both things.

Do you want to implement any validation checks on the user's input, such as checking for valid CPT codes or prices?
nah.

How do you want to display the edited results? Should they be displayed in a separate section, or should they be integrated into the original results?
integrate them into orignal results, but also have a option to go back or undo. 

How do you want to handle the notes feature? Should the user be able to add multiple notes, or should they be limited to a single note?
they can add multiple notes.

Do you want to add any additional features, such as the ability to export the results to a CSV file or send them via email?

no to csv, yes to email

How do you want to handle the email feature? Should the user be able to enter multiple email addresses, or should they be limited to a single email address?
yes multple emails.

Do you want to add any additional features, such as the ability to password-protect the results or to add a watermark to the results?
not as of now. maybe later.

Are there any specific email templates or formatting requirements that you would like me to follow when implementing the emailing of results feature?
no, you decide.

How do you want to handle the case where the user enters an invalid email address?
inform the user of that.

Do you want to add any additional information to the email, such as a subject line or a greeting?
just a basic subject like "your billing analysis results"

Are there any specific email sending libraries or APIs that you would like me to use when implementing the emailing of results feature?
you decide. remeber, everything must be free. 